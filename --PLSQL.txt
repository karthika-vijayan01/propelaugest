--PLSQL
DECLARE 
   V PRODUCT.WEIGHT%TYPE;
BEGIN
   SELECT WEIGHT INTO V FROM PRODUCT WHERE P_ID=11294;
END

CREATE TABLE product( productid int primary key NOT NULL,productname varchar(50) UNIQUE,productdiscription varchar(50), price int,weight int,companycode int)

INSERT ALL
into product values(11293,'meswak','ayurvedic',30,200,112234)
into product values(11294,'colgate','paste',40,300,112233)
into product values(11295,'pepu','paste',50,400,112234)
into product values(11296,'closeup','toothcare',60,500,112232)
into product values(11297,'sensu','toothcare',70,600,112232)
into product values(11298,'vicco','ayurvedic',70,600,112237)
select * from dual
select * from product
CREATE TABLE product1( productid int primary key NOT NULL,productname varchar(50) UNIQUE,productdiscription varchar(50), price int,weight int,companycode int)
INSERT INTO PRODUCT1 SELECT * FROM PRODUCT
SELECT * FROM PRODUCT1
INSERT into product values(112892,'CHANDRIKA','HIMALAYA',80,800,112234)

DECLARE 
   P PRODUCT %ROWTYPE;
BEGIN
   SELECT * INTO P FROM PRODUCT WHERE P_ID=112892;
   INSERT INTO PRODUCT1 VALUES(P.P_ID,P.P_NMAE,P.P_DESC,P.P_PRICE,P.WEIGHT,P.CMP_COD);

END


--CONDITION OPERATORS -------IF ELSE
DECLARE
   A NUMBER := 2;
   B NUMBER := 5;
   C NUMBER := 3;
BEGIN
   IF A>B AND A>C THEN
      DBMS_OUTPUT.PUT_LINE(A|| ' A IS LARGEST');
   ELSE 
      IF B>C THEN
      DBMS_OUTPUT.PUT_LINE(B|| ' B IS LARGEST');
      ELSE
      DBMS_OUTPUT.PUT_LINE(C|| ' V IS LARGEST');
      END IF;
   END IF;
END;

------------LOOPS  
--BASIC LOOP
DECLARE
   I NUMBER;
BEGIN
   I:=1;
   LOOP 
      DBMS_OUTPUT.PUT_LINE(I);
      I:=I+1;
      EXIT WHEN I>10;
   END LOOP;
END;

-----------------------------OR
DECLARE
   I NUMBER;
BEGIN
   I:=1;
   LOOP 
      DBMS_OUTPUT.PUT_LINE(I);
      I:=I+1;
      IF I>10 THEN EXIT;
      END IF;
   END LOOP;
END;


------FOR LOOP
DECLARE
   I NUMBER;
BEGIN
   FOR I IN 1..10
   LOOP 
      DBMS_OUTPUT.PUT_LINE(I);
     
   END LOOP;
END;

-----------WHILE LOOP
DECLARE
   I NUMBER;
BEGIN
   I:=1;
   WHILE I<=10 LOOP 
     DBMS_OUTPUT.PUT_LINE(I); 
     I:= I + 1;
   END LOOP;
END;

------------ASSIGNMENT TABLE WITH LOOP
CREATE TABLE LOOPS(ID NUMBER,NAME VARCHAR(20))
DECLARE
   I NUMBER:=1;
BEGIN
  
   WHILE I<=4 LOOP 
     INSERT INTO LOOPS(ID,NAME) VALUES(I,'HR');
     I:= I + 1;
   END LOOP;
END;

DROP TABLE LOOPS
SELECT * FROM LOOPS

-------------OR
DECLARE
   I NUMBER:=1;
BEGIN
  
   WHILE I<=4 LOOP 
     INSERT INTO LOOPS(ID,NAME) VALUES(I,'HR');
     I:= I + 1;
   END LOOP;
END;
FOR R IN (SELECT * FROM LOOPS) LOOP
DBMS_OUTPUT.PUT_LINE(R.ID ||' '||R.NAME); 
  END LOOP;
END;


--BIND VARIABLE
select * from employee
SELECT ANUAL_INCOME FROM EMPLOYEE WHERE E_MP = 2
--SQL
SELECT ANUAL_INCOME FROM EMPLOYEE WHERE E_MP = :E_MP
--PLSQL
DECLARE
 V_NAME VARCHAR(20);
BEGIN
  SELECT E_NAME INTO V_NAME FROM EMPLOYEE WHERE E_MP = :E_MP;
  
      DBMS_OUTPUT.PUT_LINE(V_NAME|| ' IS MY NAME');
     
END;
-----------------------------
DECLARE 
  N1 NUMBER;
  N2 NUMBER;
  N3 NUMBER;
BEGIN
  N1 :=10;
  N2 :=20;
  DIS_SUM(N1,N2,N3);--CALL THE ABOVE FUNCTION 
  DBMS_OUTPUT.PUT_LINE('SUM IS '||N3);
END;



------------------------------------
CREATE TABLE LOGIN(ID INT PRIMARY KEY,NAME VARCHAR(20))
SELECT * FROM LOGIN
CREATE OR REPLACE PROCEDURE INS_USE(UID IN NUMBER,UNAME IN LOGIN.NAME %TYPE)
IS
BEGIN
 INSERT INTO LOGIN VALUES(UID,UNAME);
 DBMS_OUTPUT.PUT_LINE('RECORD INSERTED SUCCESSFULLY');
END;

SELECT * FROM LOGIN
BEGIN
 INS_USE(101,'VEENA');
 DBMS_OUTPUT.PUT_LINE('RECORD INSERTED SUCCESSFULLY');
END;

------------DYNAMIC
BEGIN
 INS_USE(:IDU,:NAMEU);
 DBMS_OUTPUT.PUT_LINE('RECORD INSERTED SUCCESSFULLY');
END;



----------------------------------------------FUNCTION

----------------------------------
---FUNCTIONS
CREATE OR REPLACE FUNCTION  DISPL_SUM(X IN NUMBER,Y IN NUMBER)
RETURN NUMBER
IS
BEGIN
 Z:=X+Y;
 RETURN Z;
END DISPL_SUM;
          SELECT * FROM LOGIN
DECLARE 
  N1 NUMBER;
  N2 NUMBER;
  RES NUMBER;

BEGIN
  N1 :=10;
  N2 :=20;
  RES :=DISP_SUM(N1,N2);
  DBMS_OUTPUT.PUT_LINE('SUM IS '||RES);
END;
SELECT * FROM EMPLOYEE
-----------------------------
CREATE OR REPLACE FUNCTION GET_SALARY(E_ID IN NUMBER)
RETURN NUMBER
IS
 E_SALARY NUMBER;
BEGIN
 SELECT ANUAL_INCOME INTO E_SALARY FROM EMPLOYEE WHERE E_MP=E_ID;
 RETURN E_SALARY;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  RETURN NULL;
END;
-----FUNCTION CALL
DECLARE
  RES_SAL NUMBER;
BEGIN
  RES_SAL := GET_SALARY(4);
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||RES_SAL);
END;

----OR
DECLARE
  RES_SAL NUMBER;
BEGIN
  RES_SAL := GET_SALARY(:SAL);
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||RES_SAL);
END;

-----------------------------------------------------------
-----------************EXCEPTIONS HANDLING**********----------------
------------------------------------------------------------------
DECLARE 
 V1 PRODUCT%ROWTYPE;
BEGIN
 SELECT * INTO V1 FROM PRODUCT WHERE P_ID = 1000;
END;
----ABOVE IS A PREDEFINED EXCEPTION  (NO DATA FOUNT)
----BELOW HANDLING NO DATA FOUND
DECLARE 
 V1 PRODUCT%ROWTYPE;
BEGIN
 SELECT * INTO V1 FROM PRODUCT WHERE P_ID =: PID;
 DBMS_OUTPUT.PUT_LINE('PRODUCT FOUND WITH THE DATAS:' V1.P_ID ||'  '|| V1.P_NMAE ||'  '||V1.P_DESC ||'  '|| V1.P_PRICE|| '  '|| V1.WEIGHT ||'  '|| V1.CMP_COD);
EXCEPTION 
 WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('PRODUCT NOT FOUND');
END;
 
SELECT * FROM PRODUCT
----------------------------- MORE THAN ONE EXCEPTION

DECLARE
  ENAME VARCHAR(20);
BEGIN
  SELECT  E_NAME INTO ENAME FROM EMPLOYEE ;
  DBMS_OUTPUT.PUT_LINE(ENAME);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('PRODUCT NOT FOUND');
END;
-----------------------------
--USER DEFINED
DECLARE
 INVALID_PRO EXCEPTION;
BEGIN
 UPDATE PRODUCT SET WEIGHT = : V_WEIGHT WHERE P_ID=:P_PROID;
IF SQL%NOTFOUND THEN**
 RAISE INVALID_PRO;
END IF;
EXCEPTION
 WHEN INVALID_PRO THEN
 DBMS_OUTPUT.PUT_LINE('INVALID PRODUCT ID');
END;
SELECT * FROM PRODUCT

SQL%NOTFOUND
***IT RETURN A BOOLEAN VALUE AND
  *ITS AN ATTRIBUTE 
  *IF SELECT INTO STATEMENT NOT RETURN ANY ROW OR
  *UPDATE OR DELETE VALUE IS NOT RETURN
--------USER DEFINED ORACLE ERROR MSG  OR UNNAMED PROGRAMMER DEFINED
DECLARE
EMPID NUMBER;
BEGIN
 SELECT  E_MP INTO EMPID  FROM EMPLOYEE WHERE  E_NAME ='HEER';
END;
--------------
DECLARE
EMPID NUMBER;
BEGIN
 SELECT  E_MP INTO EMPID  FROM EMPLOYEE WHERE  E_NAME ='HEER';
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  DBMS_OUTPUT.PUT_LINE('INVALID PRODUCT ID');
END;
-----------------RAISE
DECLARE
EMPID NUMBER;
BEGIN
 SELECT E_MP INTO EMPID FROM EMPLOYEE WHERE E_NAME ='HEER';
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  RAISE_APPLICATION_ERROR(-20000,'NO EMPLOYEE FOUND');
END;
--------------- PRAGMA EXCEPTION_INIT
DECLARE
  PPRICE NUMBER;
  NOTHING_FOUND EXCEPTION;
  PRAGMA EXCEPTION_INIT(NOTHING_FOUND,100);
BEGIN
  SELECT P_PRICE INTO PPRICE FROM PRODUCT WHERE P_ID =:PRO_ID;
EXCEPTION
  WHEN NOTHING_FOUND THEN
   DBMS_OUTPUT.PUT_LINE(SQLERRM||'  '||SQLCODE||' '||'NO SUCH ID');
END; 
----------------TOO MANY ROWS
--TOO MANY ROW
declare
  EMP_name varchar(20);
  multiple_rows_found exception;
 pragma exception_init(multiple_rows_found,-1422);
begin
 select E_NAME into EMP_name from employee;
 dbms_output.put_line(EMP_name);
exception
 when multiple_rows_found then  
   dbms_output.put_line(sqlerrm|| ' ' || sqlcode|| ' ' ||'cannot fetch multiple rows');
end;

**************************************ASSIGNMENT
create or replace function count_employee(deptno in int)
return number
is
ecount number:=0;
begin
select count(*) into ecount from employee where deptno=deptno;
return ecount;
end;

declare
deptno number:=1;
num_em number;
begin
num_em:=count_employee(deptno);
dbms_output.put_line(num_em);
end;


CREATE OR REPLACE FUNCTION GET_SALARY(E_ID IN NUMBER)
RETURN NUMBER
IS
 E_SALARY NUMBER;
BEGIN
 SELECT ANUAL_INCOME INTO E_SALARY FROM EMPLOYEE WHERE E_MP=E_ID;
 RETURN E_SALARY;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
  RETURN NULL;
END;
-----FUNCTION CALL
DECLARE
  RES_SAL NUMBER;
BEGIN
  RES_SAL := GET_SALARY(4);
  DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||RES_SAL);
END;

















